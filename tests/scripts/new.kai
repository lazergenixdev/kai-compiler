
BUILD_DATE     :: #host_import; @ignore
VERSION_STRING :: #host_import; @ignore
VERSION_MAJOR  :: #host_import; @ignore
VERSION_MINOR  :: #host_import; @ignore
VERSION_PATCH  :: #host_import; @ignore

#export
version_string :: () -> string
{
    ret VERSION_STRING;
}
@doc_short ("Get version as string (includes extra version info)")

#export
version :: () -> /* [3] */ u32
{
//    ret .{VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH};
}
@doc_short ("Get version as number")

// #export _write_u32 :: #host_import

#export Result :: u32;
//{
//    SUCCESS        = 0;
//    ERROR_MEMORY   = 1; // allocator failed
//    ERROR_SYNTAX   = 2;
//    ERROR_SEMANTIC = 3;
//    ERROR_INFO     = 4;
//    ERROR_FATAL    = 5; // means compiler bug probably
//    ERROR_INTERNAL = 6; // means compiler error unrelated to source code (e.g. out of memory)
//    RESULT_COUNT   = 7;
//}

#export Range :: struct {
    start: u32;
    count: u32;
}

#export Memory :: struct {
    size : u32;
    data : *void;
}

#export Source :: struct {
    name:     string;
    contents: string;
}
/*
#export Location :: struct {
    source : Source; // source code for this file // TODO: *u8 -> string
    string : string;
    line   : u32;
}

/*
#export Error :: struct {
    result    : Result;
    location  : Location;
    message   : string;
    context   : string;
    memory    : Memory;
    next      : *Error;
}
*/
