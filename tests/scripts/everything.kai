main :: (argv: [] str) -> s32 {
    
    n :: 100;
    for i: 0..(n-1) {
        print(i);
    }

    if n == 3 {
       h[1] = h[0] + 2;
    }

    array : [] int = make_array(int, 100);

    for item: array {
        print(item);
    }

    position :: vector(2, 3);
    position.xy = position.yx;

    ret 0;
}

s :: () {
    p :: #Julie; // This will cause issues in sematic analysis
    print(p);
}

beer :: (a: u32, b: f32) -> u32 #native;

main :: (using env: Environment) {
    beer_type :: #type (u32, f32) -> u32;

    for info: type_info {

    }

    for i: 0..2 {}
    for j: array {}
    //for h != 10 {
    //    h += 5;
    //}

    beer(beer_type, 0.05);
}

//Line :: struct (T: %) {
//    start, end: [2] T;
//};
//
//script_main :: (using env: Environment) {
//    array_push(&lines, Line(f32)(start = (1, 2), end = (0, 0)));
//
//    vec: [2] f32 = [0.5, 1];
//
//    x : int = 4;
//    y : f32 = cast(f32) x;
//    z : f32 = x -> f32; // type cast
//    w : f32 = x => f32; // type punning
//
//    for line: lines {
//        ret 0;
//    }
//}

//Bytecode_Stream :: struct {
//    data     : *u8;
//    count    : u32;
//    capacity : u32;
//    callback : (*u8) -> str;
//}
//bs := Bytecode_Stream.(data = file.data, count = file.length);
bs := Bytecode_Stream.(file.data);

//cstdlib :: #import("cstdlib", option = 3);
//
//repeat :: #macro (n: int, code: {}) {
//    for 0..n {
//        #insert code
//    }
//}
//
//test_macro :: () {
//    repeat(5, { print("hello!"); });
//}

bcs__grow_function :: (x: u32) -> u32 {
    ret x + x / 2;

    h : s64 = 4;
    l : s32 = 4;

    l = cast(s32) h;
    l = h->s32;
}

bcs__ensure_space :: (stream: *Bytecode_Stream, count: u32) -> Bytecode_Result {
    required_capacity := stream.count + count;
    if stream.capacity >= required_capacity {
        ret Bytecode_Result.SUCCESS;
    }
    new_capacity := bcs__grow_function(required_capacity);
    new_data := cstdlib.realloc(stream.data, new_capacity) -> *u8;
    if (new_data == null) ret Bytecode_Result.ERROR_MEMORY;
    stream.data = new_data;
    stream.capacity = new_capacity;
    ret Bytecode_Result.SUCCESS;
}
