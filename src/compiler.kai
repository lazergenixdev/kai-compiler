
Compile_Flags :: enum u32 {
    COMPILE_NO_CODE_GEN  =  0x0001; // "type-check" only
    COMPILE_DEBUG        =  0x8000; // enable debug printing
}

Compile_Options :: struct {
    Interpreter_Max_Step_Count : u32; // default = 1000000
    Interpreter_Max_Call_Depth : u32; // default = 1024
    flags : Compile_Flags;
}

Native_Procedure :: struct {
    name        : *u8;
    address     : *void;
    typestring  : string;
}

Import :: struct {
    name: string;
    type: string;
    value: Value;
}

Program_Create_Info :: struct {
    sources           : [] Source;
    allocator         : Allocator;
    error             : *Error;
    native_procedures : [] Native_Procedure;
    imports           : [] Import;
	options           : Compile_Options;
}

Variable :: struct {
    location: u32;
    type: Type;
}

Program :: struct {
    memory          : [..] u8;
    code            : [] u8;
    procedure_table : [string] u32;
    variable_table  : [string] Variable;
    type_table      : [string] Type;
    allocator       : Allocator;
}

Node_Flags :: enum u32 {
	NODE_TYPE            = 0x01;
	NODE_TYPE_EVALUATED  = 0x02;
	NODE_VALUE_EVALUATED = 0x04;
	NODE_EVALUATED       = 0x06;
	NODE_LOCAL           = 0x08;
	NODE_EXPORT          = 0x10;
	NODE_IMPORT          = 0x20;
	NODE_NOT_FOUND       = 0x80;
}

Node_Reference :: struct {
	flags: Node_Flags;
	index: u32;
}

// Nodes have two high level types: Procedure or anything else
// Nodes also live at Runtime or are Const
// Const nodes get baked into the program and do not live past compilation
//    while Runtime nodes can either be baked in (inlined) or hold a memory addess
// Only nodes that are explicitly marked with `#export` can be queried by the host program
Node :: struct {
	type:                   *Type_Info;  // evaluated type
	value:                   Value; // evaluated value
	location:                Location;
	expr:                   *Expr;
	type_expr:              *Expr;
	value_dependencies: [..] Node_Reference;
	type_dependencies:  [..] Node_Reference; // This can be arena??????
	flags:                   Node_Flags;
}

Scope :: struct {
    identifiers: [string] Node_Reference;
    is_proc_scope: bool;
}

/* Sea of Nodes
IrTypeId :: enum u32 {
	BOT    = 0; // Bottom (ALL)
	TOP    = 1; // Top    (ANY)
	CTRL   = 2; // Ctrl flow bottom
	SIMPLE = 3; // End of the Simple Types
	NUMBER = 4; // All Numbers
	INT    = 4; // All Integers
	TUPLE  = 5; // Tuples; finite collections of unrelated Types, kept in parallel
}

IrTypeFlag :: enum u32 {
    CONST = 0x0001;
    TOP   = 0x0002;
}

IrValue :: union {
    number: Number;
    prim:   Value;
    tuple:  [..] IrType;
}

IrType :: struct {
    type:     IrTypeId;
    flags:    IrTypeFlag;
    value:    IrValue;
}

IrNode :: struct {
    id:       u32;
    inputs:   [..] *IrNode;
    outputs:  [..] *IrNode;
    type:     IrType;
}
*/

Compiler_Context :: struct {
    error:              *Error;
    allocator:           Allocator;
    program:            *Program;
	options:             Compile_Options;
    trees:               [] Syntax_Tree;
    scopes:              [..] Scope;
    nodes:               [..] Node;
    imports:             [] Import;
    compilation_order:   [] u32;
    type_allocator:      Arena_Allocator;
    temp_allocator:      Arena_Allocator;
    current_source:      Source;
    current_node:        Node_Reference;
    number_type:         Type_Info;
    debug_writer:        Writer;
}

_create_syntax_trees :: (context: *Compiler_Context, sources: [] Source) -> bool
{
	allocator: *Allocator = *context.allocator;
	context.trees.data = _allocate(null, sources.count * sizeof(Syntax_Tree), 0) -> *Syntax_Tree;
	context.trees.count = sources.count;
	for i: 0..<sources.count {
		info: Syntax_Tree_Create_Info = Syntax_Tree_Create_Info.{
			source = sources[i],
			allocator = context.allocator,
			error = context.error,
		};
		if create_syntax_tree(*info, *array_last(*context.trees)) != KAI_SUCCESS
			ret true;
	}
	ret false;
}

_inside_procedure_scope :: (context: *Compiler_Context) -> bool
{
    for i: 0..<context.scopes.count {
        ri: u32 = context.scopes.count - 1 - i;
        scope: *Scope = *context.scopes.data[ri];
        if scope.is_proc_scope ret true;
    }
    ret false;
}

_error_redefinition :: (context: *Compiler_Context, location: Location, original: u32) -> bool
{
    /context.error = Error.{
        result = KAI_ERROR_SEMANTIC,
        location = location,
    };

    buffer: Buffer = Buffer.{allocator = context.allocator};

    // First error message	
    {
        _buffer_append_string(*buffer, STRING("indentifier \""));
        _buffer_append_string(*buffer, location.string); // 24
        _buffer_append_string(*buffer, STRING("\" has already been declared"));
        range: Range = _buffer_end(*buffer);
        context.error.memory = _buffer_done(*buffer);
        context.error.message = _range_to_string(range, context.error.memory);
    }

    // Extra info
    {
        // Append to memory
        info_range: Range = _buffer_push(*buffer, sizeof(Error));
        _buffer_append_string(*buffer, STRING("see original definition of \""));
        _buffer_append_string(*buffer, location.string); // 24
        _buffer_append_string(*buffer, STRING("\""));
        message_range: Range = _buffer_end(*buffer);
        memory: Memory = _buffer_done(*buffer);

        existing: *Node = *context.nodes.data[original];

        // Put everything together
        info: *Error = (memory.data->*u8 + info_range.start) -> *Error;
        /info = Error.{
            result = KAI_ERROR_INFO,
            location = existing.location,
            message = _range_to_string(message_range, memory),
            memory = memory,
        };
        context.error.next = info;
    }

    ret true;
}

_error_not_declared :: (context: *Compiler_Context, location: Location) -> bool
{
    /context.error = Error.{
        result = KAI_ERROR_SEMANTIC,
        location = location,
    };
    buffer: Buffer = Buffer.{allocator = context.allocator};
    _buffer_append_string(*buffer, STRING("indentifier \""));
    _buffer_append_string(*buffer, location.string);
    _buffer_append_string(*buffer, STRING("\" not declared"));
    range: Range = _buffer_end(*buffer);
    context.error.memory = _buffer_done(*buffer);
    context.error.message = _range_to_string(range, context.error.memory);
    ret true;
}

_create_nodes :: (context: *Compiler_Context, expr: *Expr) -> bool
{
    allocator: *Allocator = *context.allocator;
    allocator->void;

    if expr.id == {
    case KAI_EXPR_PROCEDURE; {
        /*
        Kai_Expr_Procedure* node = base;

        Kai_u32 new_scope_index = Context->scopes.count;
        kai__array_append(&Context->scopes, (Kai__DG_Scope) {
            .parent = Scope_Index,
            .is_proc_scope = KAI_TRUE,
        });
        //kai__hash_table_create(&Context->scopes.elements[new_scope_index].identifiers);

        node->_scope = new_scope_index;
        if (node->body) {
            return kai__dg_create_nodes_from_statement(Context, node->body, new_scope_index, KAI_TRUE, KAI_TRUE);
        }
        else {
            kai__todo("Native Functions not implemented!");
        }
        */
    }
    case KAI_STMT_IF; {
        /*
        Kai_Stmt_If* node = base;

        result = kai__dg_create_nodes_from_statement(Context, node->then_body, Scope_Index, In_Procedure, KAI_FALSE);
        if (result != KAI_SUCCESS)
            return result;

        if (node->else_body) {
            result = kai__dg_create_nodes_from_statement(Context, node->else_body, Scope_Index, In_Procedure, KAI_FALSE);
            if (result != KAI_SUCCESS)
                return result;
        }
        */
    }
    case KAI_STMT_FOR; {
        /*
        Kai_Stmt_For* node = base;
        return kai__dg_create_nodes_from_statement(Context, node->body, Scope_Index, In_Procedure, KAI_FALSE);
        */
    }
    case KAI_STMT_DECLARATION; {
        d: *Stmt_Declaration = cast expr;

        // Skip non-constants
        if (!(d.flags & KAI_FLAG_DECL_CONST) && _inside_procedure_scope(context))
            ret false;

        location: Location = Location.{
            source = context.current_source,
            string = d.name,
            line = d.line_number,
        };

        scope: *Scope = *array_last(*context.scopes);

        // Does this declaration already exist for this Scope?
        {
            index: int = table_find(*scope.identifiers, d.name);
            if index != -1 {
                reference: Node_Reference = scope.identifiers.values[index];
                context.error.result = KAI_ERROR_FATAL;
                ret _error_redefinition(context, location, reference.index);
            }
        }

        {
            reference: Node_Reference = Node_Reference.{index = context.nodes.count};
            node: Node = Node.{location = location, expr = d.expr, type_expr = d.type};

            if d.flags & KAI_FLAG_DECL_IMPORT
                node.flags |= KAI_NODE_IMPORT;

            if d.flags & KAI_FLAG_DECL_EXPORT
                node.flags |= KAI_NODE_EXPORT;

            array_push(*node.value_dependencies, Node_Reference.{flags = KAI_NODE_TYPE, index = reference.index});
            array_push(*context.nodes, node);
            table_set(*scope.identifiers, d.name, reference);
        }

        if d.expr != null {
            ret _create_nodes(context, d.expr);
        }
        ret false;
    }
    case KAI_STMT_COMPOUND; {
        c: *Stmt_Compound = cast expr;
        array_push(*context.scopes, Scope.{0});
        current: *Stmt = c.head;
        while current {
            if _create_nodes(context, current)
                ret true;
            current = current.next;
        }
        array_pop(*context.scopes);
        ret false;
    }
    }
    ret false;
}

_lookup_node :: (context: *Compiler_Context, name: string) -> Node_Reference
{
    for i: 0..<context.scopes.count {
        ri: u32 = context.scopes.count - 1 - i;
        scope: *Scope = *context.scopes.data[ri];
        k: int = table_find(*scope.identifiers, name);
        if k == -1 continue;
        ret scope.identifiers.values[k];
    }

    ret Node_Reference.{flags = KAI_NODE_NOT_FOUND};
}

add_dependency :: (context: *Compiler_Context, ref: Node_Reference)
{
    allocator: *Allocator = *context.allocator;
    deps: *[..] Node_Reference;
    node: *Node = *context.nodes.data[context.current_node.index];

    if context.current_node.flags & KAI_NODE_TYPE
        deps = *node.type_dependencies;
    else
        deps = *node.value_dependencies;

    for i: 0..<deps.count {
        other: Node_Reference = deps.data[i];
        if ref.index == other.index && ref.flags == other.flags
            ret;
    }
    array_push(deps, ref);
}

_insert_value_dependencies :: (context: *Compiler_Context, expr: *Expr) -> bool
{
    //allocator: *Allocator = *context.allocator;
    if expr == null { kai__todo("null expression\n"); }

    if expr.id == {
    case KAI_EXPR_IDENTIFIER; {
        ref: Node_Reference = _lookup_node(context, expr.source_code);

        if ref.flags & KAI_NODE_NOT_FOUND {
            node: *Node = *context.nodes.data[context.current_node.index];
            location: Location = Location.{source = node.location.source, string = expr.source_code, line = expr.line_number};
            ret _error_not_declared(context, location);
        }

        if ref.flags & KAI_NODE_LOCAL break;
        
        add_dependency(context, ref);
    }

    case KAI_EXPR_UNARY; {
        u: *Expr_Unary = cast expr;
        ret _insert_value_dependencies(context, u.expr);
    }

    case KAI_EXPR_BINARY; {
        b: *Expr_Binary = cast expr;
        if _insert_value_dependencies(context, b.left)
            ret true;
        if _insert_value_dependencies(context, b.right)
            ret true;
    }
/*
    case KAI_EXPR_PROCEDURE_CALL: {
        Kai_Expr_Procedure_Call* node = base;

        // Procedure calls in procedures are fine, we only need to know the type to generate the bytecode
        // TODO: possible bug for nested procedures
        if (In_Procedure) {
            result = kai__dg_insert_type_dependencies(
                Context,
                out_Dependency_Array,
                Scope_Index,
                node->proc
            );
        }
        else {
            result = kai__dg_insert_value_dependencies(
                Context,
                out_Dependency_Array,
                Scope_Index,
                node->proc,
                In_Procedure
            );
        }
        if (result != KAI_SUCCESS)
            return result;

        Kai_Expr current = node->arg_head;
        while (current != NULL) {
            result = kai__dg_insert_value_dependencies(
                Context,
                out_Dependency_Array,
                Scope_Index,
                current,
                In_Procedure
            );
            if (result != KAI_SUCCESS)
                return result;
            current = current->next;
        }
    }
    case KAI_EXPR_PROCEDURE; {
        Kai_Expr_Procedure* node = base;
        Kai__DG_Scope* local_scope = Context->scopes.elements + node->_scope;

        // Insert procedure input names to local scope
        Kai_Expr current = node->in_out_expr;
        for (int i = 0; i < (int)node->in_count; ++i) {
            Kai__DG_Node_Index* node_index = kai__hash_table_find(local_scope->identifiers, current->name);
            
            if (node_index != NULL) {
                Kai__DG_Node* original = &Context->nodes.elements[node_index->value];
                return kai__error_redefinition(
                    Context->error,
                    allocator,
                    current->name,
                    current->line_number,
                    original->name,
                    original->line_number
                );
            }

            kai__hash_table_emplace(local_scope->identifiers, current->name, (Kai__DG_Node_Index) {
                .flags = KAI__DG_NODE_LOCAL_VARIABLE,
            });

            current = current->next;
        }

        if (node->body) {
            result = kai__dg_insert_value_dependencies(
                Context,
                out_Dependency_Array,
                node->_scope,
                node->body,
                KAI_TRUE
            );
        }

        kai__remove_local_variables(local_scope);
    } break;
    break; case KAI_STMT_DECLARATION: {
        if (In_Procedure) {
            Kai_Stmt_Declaration* node = base;
            // Already has a dependency node
            if (node->flags & KAI_DECL_FLAG_CONST)
                return KAI_SUCCESS;
            Kai__DG_Scope* scope = Context->scopes.elements + Scope_Index;
            // Insert into local scope (if not already defined)
            Kai__DG_Node_Index* node_index = kai__hash_table_find(scope->identifiers, node->name);
            if (node_index != NULL && node_index->flags != KAI__DG_NODE_LOCAL_VARIABLE) {
                Kai__DG_Node* original = &Context->nodes.elements[node_index->value];
                return kai__error_redefinition(
                    Context->error,
                    allocator,
                    node->name,
                    node->line_number,
                    original->name,
                    original->line_number
                );
            }

            kai__hash_table_emplace(scope->identifiers,
                node->name,
                (Kai__DG_Node_Index) {
                    .flags = KAI__DG_NODE_LOCAL_VARIABLE,
                }
            );

            // Look into it's definition to find possible dependencies
            return kai__dg_insert_value_dependencies(
                Context,
                out_Dependency_Array,
                Scope_Index,
                node->expr,
                KAI_TRUE
            );
        }
        else kai__todo("invalid declaration\n");
    }

    break; case KAI_STMT_ASSIGNMENT: {
        if (In_Procedure) {
            Kai_Stmt_Assignment* node = base;
            return kai__dg_insert_value_dependencies(
                Context,
                out_Dependency_Array,
                Scope_Index,
                node->expr,
                KAI_TRUE
            );
        }
        else kai__todo("invalid assignment\n");
    }

    case KAI_STMT_RETURN: {
        Kai_Stmt_Return* node = base;
        if (In_Procedure) {
            return kai__dg_insert_value_dependencies(
                Context,
                out_Dependency_Array,
                Scope_Index,
                node->expr,
                KAI_TRUE
            );
        }
        else kai__todo("invalid return\n");
    } break;

    break; case KAI_STMT_IF: {
        Kai_Stmt_If* node = base;
        result = kai__dg_insert_value_dependencies(
            Context,
            out_Dependency_Array,
            Scope_Index,
            node->then_body,
            In_Procedure
        );
        if (result != KAI_SUCCESS)
            return result;
        if (node->else_body != NULL) {
            return kai__dg_insert_value_dependencies(
                Context,
                out_Dependency_Array,
                Scope_Index,
                node->else_body,
                In_Procedure
            );
        }
    }

    break; case KAI_STMT_COMPOUND: {
        if (In_Procedure) {
            Kai_Stmt_Compound* node = base;
            Kai_Expr current = node->head;
            while (current != NULL) {
                result = kai__dg_insert_value_dependencies(
                    Context,
                    out_Dependency_Array,
                    node->_scope,
                    current,
                    KAI_TRUE
                );
                if (result != KAI_SUCCESS)
                    return result;
                current = current->next;
            }
            Kai__DG_Scope* scope = Context->scopes.elements + node->_scope;
            kai__remove_local_variables(scope);
        }
        else kai__todo("invalid compound statement\n");
    }

    break; case KAI_STMT_FOR: {
        Kai_Stmt_For* node = base;
        return kai__dg_insert_value_dependencies(
            Context,
            out_Dependency_Array,
            Scope_Index,
            node->body,
            In_Procedure
        );
    }
*/
    }

    ret false;
}
_insert_type_dependencies :: (context: *Compiler_Context, expr: *Expr) -> bool
{
    if expr == null { kai__todo("null expression\n"); }

    if expr.id == {
    case KAI_EXPR_IDENTIFIER; {
        ref: Node_Reference = _lookup_node(context, expr.source_code);

        if ref.flags & KAI_NODE_NOT_FOUND {
            node: *Node = *context.nodes.data[context.current_node.index];
            location: Location = Location.{source = node.location.source, string = expr.source_code, line = expr.line_number};
            ret _error_not_declared(context, location);
        }

        if ref.flags & KAI_NODE_LOCAL break;
        
        ref.flags |= KAI_NODE_TYPE;
        add_dependency(context, ref);
    }

    case KAI_EXPR_UNARY; {
        u: *Expr_Unary = cast expr;
        ret _insert_type_dependencies(context, u.expr);
    }

    case KAI_EXPR_BINARY; {
        b: *Expr_Binary = cast expr;
        if _insert_type_dependencies(context, b.left)
            ret true;
        if _insert_type_dependencies(context, b.right)
            ret true;
    }
/*
    break; case KAI_EXPR_PROCEDURE_CALL: {
        Kai_Expr_Procedure_Call* node = base;

        result = kai__dg_insert_type_dependencies(
            Context,
            out_Dependency_Array,
            Scope_Index,
            node->proc
        );
        if (result != KAI_SUCCESS)
            return result;

        Kai_Expr current = node->arg_head;
        while (current != NULL) {
            result = kai__dg_insert_value_dependencies(
                Context,
                out_Dependency_Array,
                Scope_Index,
                current,
                KAI_FALSE // TODO: possible bug here ??
            );
            if (result != KAI_SUCCESS)
                return result;
            current = current->next;
        }
    }

    break; case KAI_EXPR_PROCEDURE_TYPE: {
        //kai__todo("procedure type\n");
    }

    break; case KAI_EXPR_PROCEDURE: {
        Kai_Expr_Procedure* node = base;
        Kai_Expr current = node->in_out_expr;
        while (current != NULL) {
            result = kai__dg_insert_value_dependencies(
                Context,
                out_Dependency_Array,
                Scope_Index,
                current,
                KAI_FALSE // TODO: possible bug here ??
            );
            if (result != KAI_SUCCESS)
                return result;
            current = current->next;
        }
    }

    break; case KAI_STMT_DECLARATION: {
        // What do we do here exactly?
        kai__todo("declaration\n");
    }

    break; case KAI_STMT_RETURN: {
        Kai_Stmt_Return* node = base;
        return kai__dg_insert_type_dependencies(
            Context,
            out_Dependency_Array,
            Scope_Index,
            node->expr
        );
    }

    break; case KAI_STMT_COMPOUND: {
        kai__todo("compound\n");
    }
*/
    }
    
    ret false;
}

_generate_dependency_builtin_types :: (context: *Compiler_Context) -> bool
{
	allocator: *Allocator = *context.allocator;
	scope: *Scope = *array_last(*context.scopes);
	ref: Node_Reference;

	type_type: *Type_Info = cast arena_allocate(*context.type_allocator, sizeof(Type_Info));
	type_type.id = KAI_TYPE_ID_TYPE;
	ref.index = context.nodes.count;
	table_set(*scope.identifiers, STRING("Type"), ref);
	array_push(*context.nodes, Node.{type = type_type, value = Value.{type = type_type}, flags = KAI_NODE_EVALUATED});
	
	s32_type: *Type_Info_Integer = cast arena_allocate(*context.type_allocator, sizeof(Type_Info_Integer));
	s32_type.id = KAI_TYPE_ID_INTEGER;
	s32_type.is_signed = true;
	s32_type.bits = 32;
	ref.index = context.nodes.count;
	table_set(*scope.identifiers, STRING("s32"), ref);
	array_push(*context.nodes, Node.{type = type_type, value = Value.{type = s32_type->Type}, flags = KAI_NODE_EVALUATED});

	s64_type: *Type_Info_Integer = cast arena_allocate(*context.type_allocator, sizeof(Type_Info_Integer));
	s64_type.id = KAI_TYPE_ID_INTEGER;
	s64_type.is_signed = true;
	s64_type.bits = 64;
	ref.index = context.nodes.count;
	table_set(*scope.identifiers, STRING("s64"), ref);
	array_push(*context.nodes, Node.{type = type_type, value = Value.{type = s64_type->Type}, flags = KAI_NODE_EVALUATED});
	
	f32_type: *Type_Info_Float = cast arena_allocate(*context.type_allocator, sizeof(Type_Info_Float));
	f32_type.id = KAI_TYPE_ID_FLOAT;
	f32_type.bits = 32;
	ref.index = context.nodes.count;
	table_set(*scope.identifiers, STRING("f32"), ref);
	array_push(*context.nodes, Node.{type = type_type, value = Value.{type = f32_type->Type}, flags = KAI_NODE_EVALUATED});
	
    context.number_type.id = KAI_TYPE_ID_NUMBER;
	ret false;
}

_generate_dependency_graph :: (context: *Compiler_Context) -> bool
{
    allocator: *Allocator = *context.allocator;
    allocator->void;
    
    // Initialize Global Scope
    array_push(*context.scopes, Scope.{ is_proc_scope = false });

	if _generate_dependency_builtin_types(context)
		ret true;

    // Insert nodes from syntax tree
    for i: 0..<context.trees.count {
        tree: *Syntax_Tree = *context.trees.data[i];
        context.current_source = tree.source;

        current: *Stmt = tree.root.head;
        while current {
            if _create_nodes(context, current)
                ret true;
            current = current.next;
        }
    }

    // Insert dependencies for each node
    for i: 0..<context.nodes.count
    {
        node: *Node = *context.nodes.data[i];
        context.current_node.index = i;

		if node.flags & KAI_NODE_EVALUATED || node.flags & KAI_NODE_IMPORT
			continue;

        context.current_node.flags = 0;
        if _insert_value_dependencies(context, node.expr)
            ret true;

        context.current_node.flags = KAI_NODE_TYPE;
        if _insert_type_dependencies(context, node.expr)
            ret true;
    }
/*
    for i: 0..<context.nodes.count {
        node: *Node = *context.nodes.data[i];
        printf("node (%i) %.*s V{ ", i, node.location.string.count, node.location.string.data);
        for j: 0..<node.value_dependencies.count {
            ref: Node_Reference = node.value_dependencies.data[j];
            id: u8 = #char "v";
            if ref.flags & KAI_NODE_TYPE id = #char "t";
            printf("%i%c", ref.index, id);
            if j+1 < node.value_dependencies.count
                printf(", ");
        }
        printf(" } T{ ");
        for j: 0..<node.type_dependencies.count {
            ref: Node_Reference = node.type_dependencies.data[j];
            id: u8 = #char "v";
            if ref.flags & KAI_NODE_TYPE id = #char "t";
            printf("%i%c", ref.index, id);
            if j+1 < node.type_dependencies.count
                printf(", ");
        }
        printf(" }\n");
    }
*/
    ret false;
}

_DFS_Context :: struct {
    context: *Compiler_Context;
    post: *u32;
    prev: *u32;
    visited: *bool;
    next: u32;
}

_explore_dependencies :: (dfs: *_DFS_Context, ref: Node_Reference)
{
    index: u32 = (ref.index << 1) | (ref.flags & KAI_NODE_TYPE);
    dfs.visited[index] = true;

    node: *Node = *dfs.context.nodes.data[ref.index];

    deps: *[..] Node_Reference;
    if ref.flags & KAI_NODE_TYPE  deps = *node.type_dependencies;
    else                          deps = *node.value_dependencies;

    for d: 0..<deps.count {
        dep: Node_Reference = deps.data[d];
        d_index: u32 = (dep.index << 1) | (dep.flags & KAI_NODE_TYPE);

        if !dfs.visited[d_index] {
            dfs.prev[d_index] = index;
            _explore_dependencies(dfs, dep);
        }
    }

    dfs.post[index] = dfs.next;
    dfs.next += 1;
}

_generate_compilation_order :: (context: *Compiler_Context) -> bool
{
    // TODO: only one allocation necessary
    allocator: *Allocator = *context.allocator;
    dfs: _DFS_Context = _DFS_Context.{context = context, next = 0};
    dfs.post    = _allocate(null, context.nodes.count * 2 * sizeof(u32), 0) -> *u32;
    dfs.prev    = _allocate(null, context.nodes.count * 2 * sizeof(u32), 0) -> *u32;
    dfs.visited = _allocate(null, context.nodes.count * 2 * sizeof(bool), 0) -> *bool;
    _memory_fill(dfs.prev, 0xFF, context.nodes.count * 2 * sizeof(u32));

    // Perform DFS traversal
    for i: 0..<context.nodes.count {
        ref: Node_Reference = Node_Reference.{index = i};

        v: u32 = (ref.index << 1) | (ref.flags & KAI_NODE_TYPE);
        if !dfs.visited[v] _explore_dependencies(*dfs, ref);

        ref.flags = KAI_NODE_TYPE;
        t: u32 = (ref.index << 1) | (ref.flags & KAI_NODE_TYPE);
        if !dfs.visited[t] _explore_dependencies(*dfs, ref);
    }

    // Sort based on the post number to linearize the graph
    context.compilation_order.count = context.nodes.count * 2;
    context.compilation_order.data = _allocate(null, context.compilation_order.count * sizeof(u32), 0) -> *u32;

    for i: 0..<context.compilation_order.count {
        context.compilation_order.data[dfs.post[i]] = i;
    }
/*
    for i: 0..<context.compilation_order.count {
        k: u32 = context.compilation_order.data[i];
        index: u32 = k >> 1;
        ch: u8 = #char "v";
        if k & 1 { ch = #char "t"; }
        printf("%i%c\n", index, ch);
    }
*/
    ret false;
}

_error_fatal :: (context: *Compiler_Context, message: string) -> bool
{
	context.error.result = KAI_ERROR_FATAL;
	context.error.message = message;
	ret true;
}

_value_to_number :: (value: Value, type: *Type_Info, out_number: *Number) -> bool
{
    if type.id == {
        case KAI_TYPE_ID_INTEGER; {
            info: *Type_Info_Integer = cast type;
            num: Number = Number.{d = 1};
            if info.is_signed {
                num.is_neg = value.s64 < 0;
                if num.is_neg {
                    num.n = (-value.s64) -> u64;
                }
                else {
                    num.n = value.s64 -> u64;
                }
            }
            else {
                num.n = value.u64;
            }
            /out_number = number_normalize(num);
            ret false;
        }

        case; {
            ret true;
        }
    }
}

_evalate_binary_operation :: (op: u32, type: *Type_Info, a: Value, b: Value) -> Value
{
    if type.id == {
        case KAI_TYPE_ID_INTEGER; {
            info: *Type_Info_Integer = cast type;
            if info.is_signed {
                if info.bits == {
                    case 32; {
                        if op == {
                            case #char "+"; ret Value.{s32 = a.s32 + b.s32};
                            case #char "-"; ret Value.{s32 = a.s32 - b.s32};
                        }
                    }
                }
            }
            kai__todo("integer op = %i, is_signed = %i, bits = %i", op, info.is_signed, info.bits);
        }
        case KAI_TYPE_ID_FLOAT; {
            info: *Type_Info_Float = cast type;
            if info.bits == {
                case 32; {
                    if op == {
                        case #char "+"; ret Value.{f32 = a.f32 + b.f32};
                        case #char "-"; ret Value.{f32 = a.f32 - b.f32};
                    }
                }
            }
            kai__todo("float op = %i, bits = %i", op, info.bits);
        }
        case KAI_TYPE_ID_NUMBER; {
            if op == {
                case #char "+"; {
                    ret Value.{number = number_add(a.number, b.number)};
                }
            }
            kai__todo("op = %i", op);
        }
        case; {
            kai__todo("type.id = %i", type.id);
        }
    }
}

_value_of_expression :: (context: *Compiler_Context, expr: *Expr, out_value: *Value, out_type: *Type) -> bool
{
	assert(expr != null);

	if expr.id == {
		case KAI_EXPR_IDENTIFIER; {
			ref: Node_Reference = _lookup_node(context, expr.source_code);

			if ref.flags & KAI_NODE_NOT_FOUND
				ret _error_fatal(context, STRING("cant find node [todo]"));

			node: *Node = *context.nodes.data[ref.index];
			
			if !(node.flags & KAI_NODE_EVALUATED)
				ret _error_fatal(context, STRING("node not evaluated [todo]"));

            /out_value = node.value;
			/out_type = node.type;
			ret false;
		}

        case KAI_EXPR_NUMBER; {
            n: *Expr_Number = cast expr;
            /out_value = Value.{number = n.value};
            /out_type = *context.number_type;
            ret false;
        }

        case KAI_EXPR_BINARY; {
            b: *Expr_Binary = cast expr;
            lt: *Type_Info;
            rt: *Type_Info;
            lv: Value;
            rv: Value;

            if _value_of_expression(context, b.left, *lv, *lt)
                ret true;

            if _value_of_expression(context, b.right, *rv, *rt)
                ret true;

            if lt != rt {
                // TODO: number => concrete type (except shift)
                if lt.id == KAI_TYPE_ID_NUMBER {
                    // rt => Number
                    if _value_to_number(rv, rt, *rv.number)
                        ret _error_fatal(context, STRING("cannot convert value to number"));

                    rt = *context.number_type;
                }
                else if rt.id == KAI_TYPE_ID_NUMBER {
                    // lt => Number
                    if _value_to_number(lv, lt, *lv.number)
                        ret _error_fatal(context, STRING("cannot convert value to number"));

                    lt = *context.number_type;
                }
                else _error_fatal(context, STRING("invalid binary expression [todo]"));
            }

            /out_value = _evalate_binary_operation(b.op, lt, lv, rv);
            /out_type = lt;
            ret false;
        }

		case; {
			kai__todo("%s (expr.id = %i)", __FUNCTION__, expr.id);
		}
	}
}

_type_of_expression :: (context: *Compiler_Context, expr: *Expr) -> Type
{
	assert(expr != null);

	if expr.id == {
		case KAI_EXPR_IDENTIFIER; {
			ref: Node_Reference = _lookup_node(context, expr.source_code);

			if ref.flags & KAI_NODE_NOT_FOUND {
				_error_fatal(context, STRING("cant find node [todo]"));
				ret null;
			}

			node: *Node = *context.nodes.data[ref.index];
			
			if !(node.flags & KAI_NODE_TYPE_EVALUATED) {
				_error_fatal(context, STRING("node type not evaluated [todo]"));
				ret null;
			}

			ret node.type;
		}

        case KAI_EXPR_NUMBER; {
            // TODO make better
			ref: Node_Reference = _lookup_node(context, STRING("s32"));
			if ref.flags & KAI_NODE_NOT_FOUND ret null;
			node: *Node = *context.nodes.data[ref.index];
            ret node.value.type;
        }

        case KAI_EXPR_BINARY; {
            b: *Expr_Binary = cast expr;
            lt: *Type_Info = _type_of_expression(context, b.left);
            rt: *Type_Info = _type_of_expression(context, b.right);
            if lt != rt {
                kai__todo("binary expression with different types");
                ret null;
            }
            ret lt;
        }

		case; {
			kai__todo("%s (expr.id = %i)", __FUNCTION__, expr.id);
		}
	}
}

_compile_node_value :: (context: *Compiler_Context, node: *Node) -> bool
{
    type: *Type_Info;
    value: Value;
    if _value_of_expression(context, node.expr, *value, *type)
        ret true;

    if type != node.type {
        // Able to auto-cast Numbers => Integer | Float
        if type.id == KAI_TYPE_ID_NUMBER {
            if node.type.id == {
                case KAI_TYPE_ID_INTEGER; {
                    // TODO: bounds check
                    node.value.u64 = number_to_u64(value.number);
                    ret false;
                }
                case KAI_TYPE_ID_FLOAT; {
                    // TODO: bounds check
                    type_info: *Type_Info_Float = cast node.type;
                    fv: f64 = number_to_f64(value.number);
                    if type_info.bits == 32
                        node.value.f32 = fv -> f32;
                    else
                        node.value.f64 = fv;
                    ret false;
                }
            }
        }

        printf("Cannot convert ");
        write_type(*context.debug_writer, type);
        printf(" => ");
        write_type(*context.debug_writer, node.type);
        printf("\n");
    }

    node.value = value;
	ret false;
}

_find_import :: (context: *Compiler_Context, name: string) -> *Import
{
    for i: 0..<context.imports.count {
        import: *Import = *context.imports.data[i];
//        printf("import.name = %.*s, %.*s", import.name.count, import.name.data, name.count, name.data);
        if string_equals(import.name, name)
            ret import;
    }
    ret null;
}

_expression_from_string :: (context: *Compiler_Context, s: string) -> *Expr
{
    parser: Parser;
    parser.tokenizer.source = s;
    parser.tokenizer.line_number = 1;
    parser.error = context.error;
    parser.arena = context.temp_allocator;

    tokenizer_next(*parser.tokenizer);
    type: *Expr = parse_type_expression(*parser);

    if type == null {
        _error_fatal(context, STRING("could not parse string"));
    }

    context.temp_allocator = parser.arena;
    ret type;
}

_compile_node_type :: (context: *Compiler_Context, node: *Node) -> bool
{
    import: *Import;
    if node.flags & KAI_NODE_IMPORT {
        import = _find_import(context, node.location.string);
        if import == null
            ret _error_fatal(context, STRING("cannot find import"));

        if node.type_expr == null {
            if import.type.count == 0
                ret _error_fatal(context, STRING("host import must be typed"));

            node.type_expr = _expression_from_string(context, import.type);
            if node.type_expr == null ret true;
        }

        node.value = import.value;
    }

	if node.type_expr != null {
		type: *Type_Info;
        value: Value;

        if _value_of_expression(context, node.type_expr, *value, *type)
            ret true;
		
		if type == null
			ret true;

		if type.id != KAI_TYPE_ID_TYPE
			ret _error_fatal(context, STRING("type is not type"));

        // check type against import
        if node.flags & KAI_NODE_IMPORT && import.type.count != 0
        {
            import_type_expr: *Expr = _expression_from_string(context, import.type);
            if import_type_expr == null ret true;
            
            import_type_type: *Type_Info;
            import_type_value: Value;

            if _value_of_expression(context, import_type_expr, *import_type_value, *import_type_type)
                ret true;

            if import_type_type == null
                ret true;

            if import_type_type.id != KAI_TYPE_ID_TYPE
                ret _error_fatal(context, STRING("import expr type is not type"));

            if value.type != import_type_value.type
                ret _error_fatal(context, STRING("import type does not match declaration"));
        }
		
		node.type = value.type;
		node.flags |= KAI_NODE_TYPE_EVALUATED;
		ret false;
	}

	type: Type = _type_of_expression(context, node.expr);
	if type == null
		ret true;

	node.type = type;
	node.flags |= KAI_NODE_TYPE_EVALUATED;
	ret false;
}

// ret #size(type)  (bytes)
_type_size :: (type: *Type_Info) -> u32
{
    if type.id == {
        case KAI_TYPE_ID_INTEGER; {
            info: *Type_Info_Integer = cast type;
            ret info.bits / 8;
        }
        case KAI_TYPE_ID_FLOAT; {
            info: *Type_Info_Float = cast type;
            ret info.bits / 8;
        }
    }

    kai__todo("type.id = %i", type.id);
}

_copy_value :: (out: *u8, type: *Type_Info, value: Value)
{
    if type.id == {
        case KAI_TYPE_ID_INTEGER; {
            info: *Type_Info_Integer = cast type;
            if info.is_signed {
                if info.bits == {
                    case  8; /(out -> *s8)  = value.s8;
                    case 16; /(out -> *s16) = value.s16;
                    case 32; /(out -> *s32) = value.s32;
                    case 64; /(out -> *s64) = value.s64;
                }
            }
            else {
                if info.bits == {
                    case  8; /(out -> *u8)  = value.u8;
                    case 16; /(out -> *u16) = value.u16;
                    case 32; /(out -> *u32) = value.u32;
                    case 64; /(out -> *u64) = value.u64;
                }
            }
        }
        case KAI_TYPE_ID_FLOAT; {
            info: *Type_Info_Float = cast type;
            if info.bits == {
                case 32; /(out -> *f32) = value.f32;
                case 64; /(out -> *f64) = value.f64;
            }
        }
        case; {
            kai__todo("type.id = %i", type.id);
        }
    }
}

_push_value :: (context: *Compiler_Context, type: *Type_Info, value: Value) -> u32
{
    allocator: *Allocator = *context.allocator;
    size: u32 = _type_size(type);
    location: u32 = context.program.memory.count;
    array_grow(*context.program.memory, size);
    _copy_value(context.program.memory.data, type, value);
    ret location;
}

_compile_all_nodes :: (context: *Compiler_Context) -> bool
{
    allocator: *Allocator = *context.allocator;
    for i: 0..<context.compilation_order.count
    {
        k: u32 = context.compilation_order.data[i];
        ref: Node_Reference = Node_Reference.{index = (k >> 1), flags = (k & 1)};
		node: *Node = *context.nodes.data[ref.index];

		if (node.flags & KAI_NODE_EVALUATED) == KAI_NODE_EVALUATED
			continue;

        context.current_source = node.location.source;

        writer: *Writer = *context.debug_writer;

		if ref.flags & KAI_NODE_TYPE {
            if context.options.flags & KAI_COMPILE_DEBUG {
                printf("compiling typeof(%.*s)\n", node.location.string.count, node.location.string.data);
            }
			if _compile_node_type(context, node)
				ret true;
            if context.options.flags & KAI_COMPILE_DEBUG {
                printf("=> ");
                write_type(*context.debug_writer, node.type);
                printf("\n");
            }
		}
		else {
            if context.options.flags & KAI_COMPILE_DEBUG {
                printf("compiling (%.*s)\n", node.location.string.count, node.location.string.data);
            }
            if !(node.flags & KAI_NODE_IMPORT) {
                if _compile_node_value(context, node)
                    ret true;
            }
            if context.options.flags & KAI_COMPILE_DEBUG {
                printf("=> ");
                if node.type.id == {
                    case KAI_TYPE_ID_INTEGER; {
                        info: *Type_Info_Integer = cast node.type;
                        if info.is_signed _write_s64(node.value.s64);
                        else _write_u64(node.value.u64);
                    }
                    case KAI_TYPE_ID_FLOAT; {
                        //info: *Type_Info_Float = cast node.type;
                        _write_f64(node.value.f32 -> f64);
                    }
                }
                printf("\n");
            }
            if node.flags & KAI_NODE_EXPORT {
                location: u32 = _push_value(context, node.type, node.value);
                table_set(*context.program.variable_table, node.location.string, Variable.{type = node.type, location = location});
            }
		}
    }
    ret false;
}

_generate_compiler_ir :: (context: *Compiler_Context) -> bool
{
    context->void;
    //context.error.result = KAI_ERROR_FATAL;
    ret false;
}

create_program :: (info: *Program_Create_Info, out_program: *Program) -> Result
{
    context: Compiler_Context = Compiler_Context.{
        error = info.error,
        allocator = info.allocator,
        program = out_program,
        options = info.options,
        imports = info.imports,
        debug_writer = writer_stdout(),
    };
	arena_create(*context.type_allocator, *info.allocator);
	arena_create(*context.temp_allocator, *info.allocator);

	if !(info.options.flags & KAI_COMPILE_NO_CODE_GEN) {
		context.error.message = STRING("Code generation not currently supported :(");
		context.error.result = KAI_ERROR_FATAL;
		ret KAI_ERROR_FATAL;
	}

    while context.error.result == KAI_SUCCESS {
        if _create_syntax_trees(*context, info.sources) break;
        if _generate_dependency_graph(*context) break;
        if _generate_compilation_order(*context) break;
        if _compile_all_nodes(*context) break;
        break;
    }

    ret context.error.result;
}

destroy_program :: (program: *Program)
{
    program->void;
}

find_variable :: (program: *Program, name: string, type: *Type) -> *void
{
    index: int = table_find(*program.variable_table, name);
    if index == -1 ret null;
    var: Variable = program.variable_table.values[index];
    if type == null ret null;
    /type = var.type;
    ret program.memory.data + var.location;
}

find_procedure :: (program: *Program, name: string, type: string) -> *void
{
    data: *u8 = cast malloc(name.count + type.count);
    _memory_copy(data, name.data, name.count);
    _memory_copy(data + name.count, type.data, type.count);
    index: int = table_find(*program.procedure_table, string.{count = name.count + type.count, data = data});
    free(data);
    if index == -1
        ret null;
    ret program.code.data + program.procedure_table.values[index];
}
